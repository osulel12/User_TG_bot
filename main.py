from telebot.async_telebot import AsyncTeleBot
from telebot import types
from telebot.asyncio_helper import ApiTelegramException
import dotenv
import os
import asyncio
import aiofiles
from pathlib import Path
from class_bd_work import Hepl_work_by_postgre
from create_keyboard import create_replay_markup, create_inline_markup
import help_variable
from file_search import File_search
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')

if os.path.exists('.env'):
    dotenv.load_dotenv('.env')


path_country_analist = r'/your/path/country/'
path_group_country_analist = r'/your/path/group_country/'


path_barier_country = r'/your/path/barier_country/'
path_region = r'/your/path/region/'

bot = AsyncTeleBot(os.getenv('TOKEN'), colorful_logs=True)

need_example_class = Hepl_work_by_postgre()


@bot.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã start

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    hello_text = await need_example_class.write_hello_func()
    chat_id = message.chat.id

    logging.info(f"user = {chat_id}, commands = start")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, f'{hello_text}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª üëá',
                               reply_markup=create_replay_markup('', 'main'))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    elif await need_example_class.check_user(chat_id, flag_approv='not_token'):
        await bot.send_message(chat_id, f'{hello_text}, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –≤–≤–µ–¥—è –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω')

    elif await need_example_class.check_user(chat_id, flag_approv='not_active'):
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user = {chat_id} –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    else:
        await bot.send_message(chat_id, f'{hello_text}, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg')


@bot.message_handler(commands=['reg'])
async def registration_command(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã reg

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id

    logging.info(f"user = {chat_id}, commands = reg")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=create_replay_markup('', 'main'))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    elif await need_example_class.check_user(chat_id, flag_approv='not_token'):
        await need_example_class.update_state_user(chat_id, 'registration')
        await bot.send_message(chat_id,
                               '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω')

    elif await need_example_class.check_user(chat_id, flag_approv='not_active'):
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user = {chat_id} –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º')

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    else:
        await need_example_class.add_user_in_db(chat_id)
        await need_example_class.update_state_user(chat_id, 'registration')
        await bot.send_message(chat_id,
                               """–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"""
                               , parse_mode='html')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'registration')
async def autorization_user(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ registration

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id

    if await need_example_class.validate_token(message.text,
                                               os.getenv('ID_SERVICE')) and await need_example_class.check_user(chat_id,
                                                                                                                flag_approv='not_token'):
        await need_example_class.update_token_user(chat_id, message.text)
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.delete_message(chat_id, message.message_id)
        await bot.send_message(chat_id, '‚ÑπÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'main')
async def main_bot_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ main

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id,
                                                   message_text[2:]) and message_text == 'üì§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä—ã–Ω–∫–æ–≤':
        await need_example_class.update_state_user(chat_id, 'analist')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá', reply_markup=create_replay_markup(message_text, 'analist'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üöß –¢–∞—Ä–∏—Ñ–Ω—ã–µ/–ù–µ—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã':
        await need_example_class.update_state_user(chat_id, 'barier')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá', reply_markup=create_replay_markup(message_text, 'barier'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üèû –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞':
        await need_example_class.update_state_user(chat_id, 'region')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá', reply_markup=create_replay_markup(message_text, 'region'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üì© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π':
        list_user_alert = await need_example_class.get_alert_description(chat_id)
        if len(list_user_alert) > 0:
            await need_example_class.update_state_user(chat_id, 'subscribe')
            pagination_status = await need_example_class.get_pagination_status(chat_id)
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üì®',
                                   reply_markup=create_inline_markup(state='subscribe',
                                                                     list_itemns=list_user_alert,
                                                                     pagen=pagination_status,
                                                                     element_on_page=5))
        else:
            await bot.send_message(chat_id,
                                   '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫',
                                   reply_markup=create_replay_markup('', 'main')
                                   )

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'ü§ñ –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç':
        await bot.send_message(chat_id, help_variable.instruction_text, parse_mode='html')

    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–∞–¥–∞ /start')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'analist')
async def analytical_section(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ analist

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üìú –°—Ç—Ä–∞–Ω–æ–≤—ã–µ —Å–ø—Ä–∞–≤–∫–∏':
        await bot.send_message(chat_id, '–î–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã/–≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ üí°',
                               reply_markup=create_replay_markup(message_text, 'analist'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üìî –ü–µ—Ä–µ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω':
        await need_example_class.update_state_user(chat_id, 'analist_country')
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –Ω–µ admin
        list_country = await need_example_class.filter_country_nnn(chat_id, os.listdir(path_country_analist))
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:', parse_mode='markdown',
                               reply_markup=create_inline_markup('analist_country', list_country, pagination_status))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üìï –ü–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø':
        await need_example_class.update_state_user(chat_id, 'analist_group_country')
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –Ω–µ admin
        list_country = await need_example_class.filter_country_nnn(chat_id, os.listdir(path_group_country_analist))
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:', parse_mode='markdown',
                               reply_markup=create_inline_markup('analist_group_country', list_country,
                                                                 pagination_status, element_on_page=9))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=create_replay_markup('', 'main'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá', reply_markup=create_replay_markup(message_text, 'analist'))

    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–∞–¥–∞ /start')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'analist_country')
async def call_back_analytical_country(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ analist_country

    :param call: call_back —Å inline keyboard
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –Ω–µ admin
    list_country = await need_example_class.filter_country_nnn(chat_id, os.listdir(path_country_analist))

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç–∞–Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ–∫
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:",
            parse_mode="markdown",
            reply_markup=create_inline_markup('analist_country', list_country, pagination_status))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1,2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif call_text in list_country and await need_example_class.check_user(chat_id):
        list_not_none_form = []
        path_full = path_country_analist + call_text
        way_pah_values = Path(path_full)
        need_search = File_search(way_pah_values)
        forma1 = need_search.get_actual_form1()
        forma2 = need_search.get_actual_form2()
        await bot.delete_message(chat_id, message_id)
        if forma2 != '':
            list_not_none_form.append('f2')
            async with aiofiles.open(forma2, 'rb') as f2:
                await bot.send_document(chat_id, f2, caption='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 2')
        else:
            await bot.send_message(chat_id, '–§–æ—Ä–º–∞ 2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        if '' in forma1:
            await bot.send_message(chat_id, '–§–æ—Ä–º–∞ 1 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        else:
            list_not_none_form.append('f1')
            async with aiofiles.open(forma1[0], 'rb') as f1, aiofiles.open(forma1[1], 'rb') as fx:
                await bot.send_media_group(chat_id, [types.InputMediaDocument(f1),
                                                     types.InputMediaDocument(fx, caption='–°–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1')])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏ —Å–ø—Ä–∞–≤–æ–∫, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
        if list_not_none_form:
            await bot.send_message(chat_id, f'–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ',
                                   reply_markup=create_inline_markup('form_version_country', list_not_none_form,
                                                                     country_state=call_text))

        await need_example_class.update_state_user(chat_id, 'analist')
        await need_example_class.insert_logging_in_db(chat_id, call_text, datetime.now(),
                                                      '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–æ–≤—ã–µ —Å–ø—Ä–∞–≤–∫–∏')


@bot.callback_query_handler(
    func=lambda call: call.data.split('.')[0] in ['form2_version_country', 'form1_version_country'])
async def get_keyboard_version_form(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π callback –∏–∑ —Å–ø–∏—Å–∫–∞
    –ù—É–∂–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏

    :param call: call_back —Å inline keyboard
    """

    chat_id = call.message.chat.id

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}")

    if await need_example_class.check_user(chat_id):
        current_state = await need_example_class.get_current_state(chat_id)
        if current_state in ['form2_version_country', 'form1_version_country', 'form2_version_group',
                             'form1_version_group']:
            await bot.send_message(chat_id=chat_id,
                                   text=f'–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Ñ–æ—Ä–º—ã{1 if "1" in current_state else 2}')
        else:
            call_text = call.data.split('.')[0]
            call_text_country = call.data.split('.')[1]
            message_id = call.message.message_id
            await need_example_class.update_section_bot(chat_id, call_text_country)
            pagination_status = await need_example_class.get_pagination_status(chat_id)
            path_full = path_country_analist + call_text_country
            way_pah_values = Path(path_full)
            file_search = File_search(way_pah_values)
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø—Ä–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if call_text == 'form2_version_country':
                try:
                    await bot.delete_message(chat_id, message_id)
                except ApiTelegramException:
                    logging.info(f'–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user = {chat_id}')
                list_file_path_form2 = file_search.get_date_create_form2()
                await need_example_class.update_state_user(chat_id, 'form2_version_country')
                await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:',
                                       reply_markup=create_inline_markup('form2_version_country',
                                                                         list_file_path_form2, pagination_status,
                                                                         element_on_page=10))
            elif call_text == 'form1_version_country':
                try:
                    await bot.delete_message(chat_id, message_id)
                except ApiTelegramException:
                    logging.info(f'–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user = {chat_id}')
                list_file_path_form1 = file_search.get_date_create_form1()
                await need_example_class.update_state_user(chat_id, 'form1_version_country')
                await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:',
                                       reply_markup=create_inline_markup('form1_version_country',
                                                                         list_file_path_form1, pagination_status,
                                                                         element_on_page=10))
    else:
        await bot.send_message(chat_id=chat_id, text='üëª')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'form2_version_country')
async def get_version_form2(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ form2_version_country
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–∞–Ω–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 2

    :param call: call_back —Å inline keyboard
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    section_country = await need_example_class.get_section_bot(chat_id)
    path_full = path_country_analist + section_country
    way_pah_values = Path(path_full)
    file_search = File_search(way_pah_values)
    list_file_path = file_search.get_date_create_form2()

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –≤–µ—Ä—Å–∏–π —Å—Ç—Ä–∞–Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ–∫ –ø–æ —Ñ–æ—Ä–º–µ 2
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:",
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup('form2_version_country', list_file_path,
                                                                      pagination_status, element_on_page=10))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø—Ä–∞–≤–∫—É
    elif call_text in list_file_path and await need_example_class.check_user(chat_id):
        forma2 = file_search.get_need_version_form2(call_text)
        await bot.delete_message(chat_id, message_id)
        async with aiofiles.open(forma2, 'rb') as f2:
            await bot.send_document(chat_id, f2, caption=f'–°–ø—Ä–∞–≤–∫–∞ "{section_country}" –ø–æ —Ñ–æ—Ä–º–µ 2')
        await need_example_class.update_state_user(chat_id, await need_example_class.get_previous_state(chat_id))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
        if '' not in file_search.get_actual_form1():
            await bot.send_message(chat_id, f'–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ "{section_country}" –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ',
                                   reply_markup=create_inline_markup('form_version_country', ['f1'],
                                                                     country_state=section_country))

        await need_example_class.insert_logging_in_db(chat_id, section_country, datetime.now(),
                                                      '–§–æ—Ä–º–∞ 2 –ø–æ —Å—Ç—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç—É')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'form1_version_country')
async def get_version_form1(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ form1_version_country
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–∞–Ω–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1

    :param call: call_back —Å inline keyboard
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    section_country = await need_example_class.get_section_bot(chat_id)
    path_full = path_country_analist + section_country
    way_pah_values = Path(path_full)
    file_search = File_search(way_pah_values)
    list_file_path = file_search.get_date_create_form1()

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –≤–µ—Ä—Å–∏–π —Å—Ç—Ä–∞–Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ–∫ –ø–æ —Ñ–æ—Ä–º–µ 1
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:",
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup('form1_version_country', list_file_path,
                                                                      pagination_status, element_on_page=10))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø—Ä–∞–≤–∫—É
    elif call_text in list_file_path and await need_example_class.check_user(chat_id):
        forma1_doc, forma1_xlsx = file_search.get_need_version_form1(call_text)
        await bot.delete_message(chat_id, message_id)
        async with aiofiles.open(forma1_doc, 'rb') as f1, aiofiles.open(forma1_xlsx, 'rb') as fx:
            await bot.send_media_group(chat_id, [types.InputMediaDocument(f1),
                                                 types.InputMediaDocument(fx,
                                                                          caption=f'–°–ø—Ä–∞–≤–∫–∞ "{section_country}" –ø–æ —Ñ–æ—Ä–º–µ 1')])
        await need_example_class.update_state_user(chat_id, await need_example_class.get_previous_state(chat_id))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
        if file_search.get_actual_form2() != '':
            await bot.send_message(chat_id, f'–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ "{section_country}" –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ',
                                   reply_markup=create_inline_markup('form_version_country', ['f2'],
                                                                     country_state=section_country))

        await need_example_class.insert_logging_in_db(chat_id, section_country, datetime.now(),
                                                      '–§–æ—Ä–º–∞ 1 –ø–æ —Å—Ç—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç—É')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'analist_group_country')
async def call_back_analytical_country_group(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ analist_group_country
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω

    :param call: call_back —Å inline keyboard
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    list_country = await need_example_class.filter_country_nnn(chat_id, os.listdir(path_group_country_analist))

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å—Ç—Ä–∞–Ω
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:",
            parse_mode="markdown",
            reply_markup=create_inline_markup('analist_group_country', list_country, pagination_status,
                                              element_on_page=9))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1,2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif call_text in list_country and await need_example_class.check_user(chat_id):
        list_not_none_form = []
        path_full = path_group_country_analist + call_text
        way_pah_values = Path(path_full)
        need_search = File_search(way_pah_values)
        forma1 = need_search.get_actual_form1()
        forma2 = need_search.get_actual_form2()
        await bot.delete_message(chat_id, message_id)
        if forma2 != '':
            list_not_none_form.append('f2')
            async with aiofiles.open(forma2, 'rb') as f2:
                await bot.send_document(chat_id, f2, caption='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 2',
                                        reply_markup=create_inline_markup('form2_version', [], 0))
        else:
            await bot.send_message(chat_id, '–§–æ—Ä–º–∞ 2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        if '' in forma1:
            await bot.send_message(chat_id, '–§–æ—Ä–º–∞ 1 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        else:
            list_not_none_form.append('f1')
            async with aiofiles.open(forma1[0], 'rb') as f1, aiofiles.open(forma1[1], 'rb') as fx:
                await bot.send_media_group(chat_id, [types.InputMediaDocument(f1),
                                                     types.InputMediaDocument(fx, caption='–°–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1')])

        if list_not_none_form:
            await bot.send_message(chat_id, f'–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ',
                                   reply_markup=create_inline_markup('form_version_group', list_not_none_form,
                                                                     country_state=call_text))
        await need_example_class.update_state_user(chat_id, 'analist')
        await need_example_class.insert_logging_in_db(chat_id, call_text, datetime.now(),
                                                      '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å—Ç—Ä–∞–Ω')


@bot.callback_query_handler(func=lambda call: call.data.split('.')[0] in ['form2_version_group', 'form1_version_group'])
async def get_keyboard_version_form_group(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ call_back —è–≤—è–ª–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞
    –ù—É–∂–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω

    :param call: call_back —Å inline keyboard
    """
    chat_id = call.message.chat.id

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}")

    if await need_example_class.check_user(chat_id):
        current_state = await need_example_class.get_current_state(chat_id)
        if current_state in ['form2_version_country', 'form1_version_country', 'form2_version_group',
                             'form1_version_group']:
            await bot.send_message(chat_id=chat_id,
                                   text=f'–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Ñ–æ—Ä–º—ã{1 if "1" in current_state else 2}')
        else:
            call_text = call.data.split('.')[0]
            call_text_country_group = call.data.split('.')[1]
            message_id = call.message.message_id
            await need_example_class.update_section_bot(chat_id, call_text_country_group)
            pagination_status = await need_example_class.get_pagination_status(chat_id)
            path_full = path_group_country_analist + call_text_country_group
            way_pah_values = Path(path_full)
            file_search = File_search(way_pah_values)
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø—Ä–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if call_text == 'form2_version_group':
                try:
                    await bot.delete_message(chat_id, message_id)
                except ApiTelegramException:
                    logging.info(f'–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 2 –¥–ª—è –≥—Ä—É–ø–ø —Å—Ç—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user = {chat_id}')
                list_file_path_form2 = file_search.get_date_create_form2()
                await need_example_class.update_state_user(chat_id, 'form2_version_group')
                await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:',
                                       reply_markup=create_inline_markup('form2_version_group',
                                                                         list_file_path_form2, pagination_status,
                                                                         element_on_page=10))
            elif call_text == 'form1_version_group':
                try:
                    await bot.delete_message(chat_id, message_id)
                except ApiTelegramException:
                    logging.info(f'–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1 –¥–ª—è –≥—Ä—É–ø–ø —Å—Ç—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º user = {chat_id}')
                list_file_path_form1 = file_search.get_date_create_form1()
                await need_example_class.update_state_user(chat_id, 'form1_version_group')
                await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:',
                                       reply_markup=create_inline_markup('form1_version_group',
                                                                         list_file_path_form1, pagination_status,
                                                                         element_on_page=10))
    else:
        await bot.send_message(chat_id=chat_id, text='üëª')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'form2_version_group')
async def get_version_form2_group(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ form2_version_group
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–∞–Ω–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω –ø–æ —Ñ–æ—Ä–º–µ 2

    :param call: call_back —Å inline keyboard
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    section_country = await need_example_class.get_section_bot(chat_id)
    path_full = path_group_country_analist + section_country
    way_pah_values = Path(path_full)
    file_search = File_search(way_pah_values)
    list_file_path = file_search.get_date_create_form2()

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–∞—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø —Å—Ç—Ä–∞–Ω —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 2
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:",
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup('form2_version_group', list_file_path,
                                                                      pagination_status, element_on_page=10))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø—Ä–∞–≤–∫—É
    elif call_text in list_file_path and await need_example_class.check_user(chat_id):
        forma2 = file_search.get_need_version_form2(call_text)
        await bot.delete_message(chat_id, message_id)
        async with aiofiles.open(forma2, 'rb') as f2:
            await bot.send_document(chat_id, f2, caption=f'–°–ø—Ä–∞–≤–∫–∞ {section_country} –ø–æ —Ñ–æ—Ä–º–µ 2')
        await need_example_class.update_state_user(chat_id, await need_example_class.get_previous_state(chat_id))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
        if '' not in file_search.get_actual_form1():
            await bot.send_message(chat_id, f'–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ "{section_country}" –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ',
                                   reply_markup=create_inline_markup('form_version_group', ['f1'],
                                                                     country_state=section_country))

        await need_example_class.insert_logging_in_db(chat_id, section_country, datetime.now(),
                                                      '–§–æ—Ä–º–∞ 2 –ø–æ –≥—Ä—É–ø–ø–µ —Å—Ç—Ä–∞–Ω –Ω–∞ –¥–∞—Ç—É')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'form1_version_group')
async def get_version_form1_group(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ form1_version_group
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–∞–Ω–æ–≤–æ–π —Å–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω –ø–æ —Ñ–æ—Ä–º–µ 1

    :param call: call_back —Å inline keyboard
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    section_country = await need_example_class.get_section_bot(chat_id)
    path_full = path_group_country_analist + section_country
    way_pah_values = Path(path_full)
    file_search = File_search(way_pah_values)
    list_file_path = file_search.get_date_create_form1()

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–∞—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø —Å—Ç—Ä–∞–Ω —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–ø—Ä–∞–≤–∫–∏:",
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup('form1_version_group', list_file_path,
                                                                      pagination_status, element_on_page=10))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø—Ä–∞–≤–∫—É
    elif call_text in list_file_path and await need_example_class.check_user(chat_id):
        forma1_doc, forma1_xlsx = file_search.get_need_version_form1(call_text)
        await bot.delete_message(chat_id, message_id)
        async with aiofiles.open(forma1_doc, 'rb') as f1, aiofiles.open(forma1_xlsx, 'rb') as fx:
            await bot.send_media_group(chat_id, [types.InputMediaDocument(f1),
                                                 types.InputMediaDocument(fx,
                                                                          caption=f'–°–ø—Ä–∞–≤–∫–∞ {section_country} –ø–æ —Ñ–æ—Ä–º–µ 1')])
        await need_example_class.update_state_user(chat_id, await need_example_class.get_previous_state(chat_id))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
        if file_search.get_actual_form2() != '':
            await bot.send_message(chat_id, f'–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ "{section_country}" –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ',
                                   reply_markup=create_inline_markup('form_version_group', ['f2'],
                                                                     country_state=section_country))

        await need_example_class.insert_logging_in_db(chat_id, section_country, datetime.now(),
                                                      '–§–æ—Ä–º–∞ 1 –ø–æ –≥—Ä—É–ø–ø–µ —Å—Ç—Ä–∞–Ω –Ω–∞ –¥–∞—Ç—É')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'barier')
async def barier_section(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –±–ª–æ–∫ –æ—Ç–¥–µ–ª–∞ –¢–∞—Ä–∏—Ñ–Ω—ã—Ö/–ù–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –±–∞—Ä—å–µ—Ä–æ–≤

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id,
                                                   message_text[2:]) and message_text == 'üìë –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã':
        await bot.send_message(chat_id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ üëá',
                               reply_markup=create_replay_markup(message_text, 'barier'))

    elif await need_example_class.get_access_section(chat_id,
                                                     message_text[2:]) and message_text == 'üì≠ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫':
        file_cert_name = await need_example_class.get_veterinary_certificates(chat_id, 'not_url')

        async with aiofiles.open(file_cert_name, 'rb') as file_cert:
            await bot.send_document(chat_id, file_cert, caption=f'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫')

        if os.path.exists(file_cert_name):
            os.remove(file_cert_name)

        await need_example_class.insert_logging_in_db(chat_id, message_text, datetime.now(),
                                                      '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üì¨ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏':
        file_cert_name = await need_example_class.get_veterinary_certificates(chat_id, 'url')

        async with aiofiles.open(file_cert_name, 'rb') as file_cert:
            await bot.send_document(chat_id, file_cert, caption=f'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏')

        if os.path.exists(file_cert_name):
            os.remove(file_cert_name)

        await need_example_class.insert_logging_in_db(chat_id, message_text, datetime.now(),
                                                      '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '‚ÜïÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤':
        file_cert_name = await need_example_class.get_veterinary_certificates(chat_id, 'history')

        async with aiofiles.open(file_cert_name, 'rb') as file_cert:
            await bot.send_document(chat_id, file_cert, caption=f'–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')

        if os.path.exists(file_cert_name):
            os.remove(file_cert_name)

        await need_example_class.insert_logging_in_db(chat_id, message_text, datetime.now(),
                                                      '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤':
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ DAG
        dag_variables = await need_example_class.get_variables_dag('–ü—Ä–æ–≤–µ—Ä–∫–∞_–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤', chat_id)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        timeout_value = await need_example_class.get_timeout_operation_value('–ü—Ä–æ–≤–µ—Ä–∫–∞_–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')

        if await need_example_class.check_timeout_operation('–ü—Ä–æ–≤–µ—Ä–∫–∞_–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤', timeout_value['field'],
                                                            timeout_value['timeout']):
            response_dag_run = await need_example_class.trigger_dag(os.getenv('DAG_BARIER'),
                                                                    dag_variables)
            if 400 in response_dag_run:
                await bot.send_message(chat_id, response_dag_run[0] + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ')
            else:
                await bot.send_message(chat_id, '‚ñ∂Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω')
            await need_example_class.insert_logging_in_db(chat_id, message_text, datetime.now(),
                                                          '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö')
        else:
            await bot.send_message(chat_id, 'üîÑ –í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '‚ùóÔ∏è –û–±–∑–æ—Ä –±–∞—Ä—å–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º':
        await bot.send_message(chat_id, '–î–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ üëá',
                               reply_markup=create_replay_markup(message_text, 'barier'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üåç –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω':
        await need_example_class.update_state_user(chat_id, 'barier_country')
        list_sorted_country = sorted([i for i in os.listdir(path_barier_country) if '.' not in i])
        dict_country = {i.split()[-1].strip() if len(i.encode('utf-8')) > 63 else i.strip(): i for i in
                        list_sorted_country}

        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:', parse_mode='markdown',
                               reply_markup=create_inline_markup('barier_country', dict_country, pagination_status))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=create_replay_markup('', 'main'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá', reply_markup=create_replay_markup(message_text, 'barier'))

    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–∞–¥–∞ /start')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'barier_country')
async def get_barier_reference(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ 'barier_country'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–µ

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    list_sorted_country = sorted([i for i in os.listdir(path_barier_country) if '.' not in i])
    dict_country = {i.split()[-1].strip() if len(i.encode('utf-8')) > 63 else i.strip(): i for i in list_sorted_country}

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç–∞–Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ–∫
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:",
            parse_mode="markdown",
            reply_markup=create_inline_markup('barier_country', dict_country, pagination_status))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif call_text in dict_country and await need_example_class.check_user(chat_id):
        path_full = path_barier_country + dict_country[call_text]
        way_pah_values = Path(path_full)
        need_search = File_search(way_pah_values)
        barier_path = need_search.get_actual_barier_reference()
        await bot.delete_message(chat_id, message_id)
        if barier_path != '':
            async with aiofiles.open(barier_path, 'rb') as f_barier:
                await bot.send_document(chat_id, f_barier, caption='–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞')
        else:
            await bot.send_message(chat_id, '–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

        await need_example_class.update_state_user(chat_id, 'barier')
        await need_example_class.insert_logging_in_db(chat_id, dict_country[call_text], datetime.now(),
                                                      '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ/–Ω–µ—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'region')
async def region_section(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –±–ª–æ–∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id,
                                                   message_text[2:]) and message_text == 'üìú –°–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 8':
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π üí°',
                               reply_markup=create_replay_markup(message_text, 'region'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üìî –ü–µ—Ä–µ—á–µ–Ω—å —Ä–µ–≥–∏–æ–Ω–æ–≤':
        await need_example_class.update_state_user(chat_id, 'region_reference')
        list_sorted_region = sorted(
            [i for i in os.listdir(path_region) if '_' not in i and '.d' not in i and '.p' not in i and '.D' not in i],
            key=lambda x: x[0].lower())
        dict_name_region = {i[:20].replace(' - ', '-') if len(i.encode('utf-8')) > 63 else i.replace(' - ', '-'): i for
                            i in list_sorted_region}
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:', parse_mode='markdown',
                               reply_markup=create_inline_markup('region_reference', dict_name_region,
                                                                 pagination_status))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá', reply_markup=create_replay_markup(message_text, 'region'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=create_replay_markup('', 'main'))

    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–∞–¥–∞ /start')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'region_reference')
async def get_region_reference(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ 'region_reference'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    list_sorted_region = sorted(
        [i for i in os.listdir(path_region) if '_' not in i and '.d' not in i and '.p' not in i and '.D' not in i],
        key=lambda x: x[0].lower())
    dict_name_region = {i[:20].replace(' - ', '-') if len(i.encode('utf-8')) > 63 else i.replace(' - ', '-'): i for i in
                        list_sorted_region}

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç–∞–Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ–∫
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:",
            parse_mode="markdown",
            reply_markup=create_inline_markup('region_reference', dict_name_region, pagination_status))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 1,2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif call_text in dict_name_region and await need_example_class.check_user(chat_id):
        path_full = path_region + dict_name_region[call_text]
        way_pah_values = Path(path_full)
        need_search = File_search(way_pah_values)
        region_path = need_search.get_actual_region_reference()
        await bot.delete_message(chat_id, message_id)
        if region_path != '':
            async with aiofiles.open(region_path, 'rb') as f_barier:
                await bot.send_document(chat_id, f_barier, caption='–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞')
        else:
            await bot.send_message(chat_id, '–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

        await need_example_class.update_state_user(chat_id, 'region')
        await need_example_class.insert_logging_in_db(chat_id, dict_name_region[call_text], datetime.now(),
                                                      '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–∫–∏')


@bot.callback_query_handler(func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'subscribe')
async def get_subscribe(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ 'subscribe'
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏ (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∞)

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    if await need_example_class.check_user(chat_id):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∞–ª–µ—Ä—Ç–∞–º
        if call_text in ['next', 'back']:
            pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üì®',
                                        reply_markup=create_inline_markup(state='subscribe',
                                                                          list_itemns=await need_example_class.get_alert_description(
                                                                              chat_id),
                                                                          pagen=pagination_status,
                                                                          element_on_page=5))

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        elif call_text.isdigit():
            btn_text = [j['text'] for i in call.message.json['reply_markup']['inline_keyboard'] for j in i if
                        j['callback_data'] == call_text][0]
            await bot.delete_message(chat_id, message_id)
            await need_example_class.update_state_user(chat_id, 'main')
            await need_example_class.alert_status_update(chat_id, int(call_text))
            await bot.send_message(chat_id,
                                   f"""–í—ã —É—Å–ø–µ—à–Ω–æ {'<b>–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b> –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' if '‚úÖ' in btn_text else '<b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b> –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É'} 
                                            \n"<b>{btn_text[2:]}</b>\"""",
                                   reply_markup=create_replay_markup('', 'main'),
                                   parse_mode='html')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª, —Ç–æ –º–æ–∂–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif call_text == 'main':
            await bot.delete_message(chat_id, message_id)
            await need_example_class.update_state_user(chat_id, 'main')
            await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                                   reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id=chat_id, text='üëª')

if __name__ == '__main__':
    asyncio.run(bot.infinity_polling(logger_level=10))
