from telebot import types
import typing


def create_replay_markup(message_text: str, state: str) -> types.ReplyKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    :param message_text: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """

    if message_text == '' and state == 'main':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üì§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä—ã–Ω–∫–æ–≤')
        btn2 = types.KeyboardButton('üöß –¢–∞—Ä–∏—Ñ–Ω—ã–µ/–ù–µ—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã')
        btn3 = types.KeyboardButton('üèû –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
        btn4 = types.KeyboardButton('üì© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π')
        btn5 = types.KeyboardButton('ü§ñ –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        return markup
    elif message_text in ['üì§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä—ã–Ω–∫–æ–≤', 'üîô –ù–∞–∑–∞–¥'] and state == 'analist':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üìú –°—Ç—Ä–∞–Ω–æ–≤—ã–µ —Å–ø—Ä–∞–≤–∫–∏')
        btn3 = types.KeyboardButton('üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1, btn3)
        return markup
    elif message_text == 'üìú –°—Ç—Ä–∞–Ω–æ–≤—ã–µ —Å–ø—Ä–∞–≤–∫–∏' and state == 'analist':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üìî –ü–µ—Ä–µ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω')
        btn2 = types.KeyboardButton('üìï –ü–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø')
        btn3 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        markup.add(btn1, btn2, btn3)
        return markup
    elif message_text in ['üöß –¢–∞—Ä–∏—Ñ–Ω—ã–µ/–ù–µ—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã', 'üîô –ù–∞–∑–∞–¥'] and state == 'barier':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üìë –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã')
        btn2 = types.KeyboardButton('‚ùóÔ∏è –û–±–∑–æ—Ä –±–∞—Ä—å–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º')
        btn4 = types.KeyboardButton('üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1, btn2, btn4)
        return markup
    elif message_text == 'üìë –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã' and state == 'barier':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üì≠ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫')
        btn2 = types.KeyboardButton('üì¨ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏')
        btn3 = types.KeyboardButton('‚ÜïÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
        btn4 = types.KeyboardButton('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
        btn5 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        return markup
    elif message_text == '‚ùóÔ∏è –û–±–∑–æ—Ä –±–∞—Ä—å–µ—Ä–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º' and state == 'barier':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üåç –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω')
        btn4 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        markup.add(btn1, btn4)
        return markup
    elif message_text in ['üèû –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥'] and state == 'region':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üìú –°–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 8')
        btn2 = types.KeyboardButton('üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        markup.add(btn1, btn2)
        return markup
    elif message_text == 'üìú –°–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ 8' and state == 'region':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üìî –ü–µ—Ä–µ—á–µ–Ω—å —Ä–µ–≥–∏–æ–Ω–æ–≤')
        btn2 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        markup.add(btn1, btn2)
        return markup


def create_inline_markup(state: str,
                         list_itemns: typing.Optional[list | dict] = None,
                         pagen: typing.Optional[int] = 0,
                         element_on_page: typing.Optional[int] = 21,
                         country_state: typing.Optional[str] = None) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param list_itemns: –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –õ–∏–±–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω/–¥–∞—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ–∫,
                        –ª–∏–±–æ —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏

    :param pagen: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    :param element_on_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    :param country_state: —Å—Ç—Ä–∞–Ω–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–ª –∫—Ä–∞–π–Ω–∏–π —Ä–∞–∑
                          –Ω–µ–æ–±—Ö–æ–¥–∏–º, –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö callbacck
                          –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—É—Ç–∞–Ω–∏—Ü—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–Ω–æ–ø–æ–∫

    :return: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """

    if state in ['analist_country', 'analist_group_country']:
        # –°–ø–∏—Å–æ–∫ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
        lst_country = [v for v in list_itemns]
        # –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—Ç–∞—É—Ä—ã
        lst_pagen_country = [lst_country[i:i + element_on_page] for i in range(0, len(lst_country), element_on_page)]
        btns = []

        # –ù–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω
        for country in lst_pagen_country[pagen]:
            btns.append(types.InlineKeyboardButton(text=country, callback_data=country))
        markup = types.InlineKeyboardMarkup()
        markup.add(*btns)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        if pagen + 1 == 1:
            markup.add(types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        elif pagen + 1 == len(lst_pagen_country):
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '))
        else:
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        return markup

    elif state in ['form2_version_country', 'form1_version_country', 'form1_version_group', 'form2_version_group']:
        lst_country = list_itemns
        lst_pagen_country = [lst_country[i:i + element_on_page] for i in range(0, len(lst_country), element_on_page)]
        btns = []

        for date in lst_pagen_country[pagen]:
            btns.append(types.InlineKeyboardButton(text=date.replace('.', '-').replace('_', '-'), callback_data=date))
        markup = types.InlineKeyboardMarkup()
        markup.add(*btns)

        if len(lst_pagen_country) == 1:
            markup.add(types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '))
        elif pagen + 1 == 1:
            markup.add(types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        elif pagen + 1 == len(lst_pagen_country):
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '))
        else:
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        return markup

    elif state == 'form_version_country':
        markup = types.InlineKeyboardMarkup()
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –º—ã –ª–∏–±–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π
        # —Ñ–æ—Ä–º–µ –∏–ª–∏ –Ω–µ—Ç
        if 'f2' in list_itemns:
            markup.add(types.InlineKeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 2', callback_data=f'form2_version_country.{country_state}'))
        else:
            pass
        if 'f1' in list_itemns:
            markup.add(types.InlineKeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 1', callback_data=f'form1_version_country.{country_state}'))
        else:
            pass
        return markup

    elif state == 'form_version_group':
        markup = types.InlineKeyboardMarkup()
        if 'f2' in list_itemns:
            markup.add(types.InlineKeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 2', callback_data=f'form2_version_group.{country_state}'))
        else:
            pass
        if 'f1' in list_itemns:
            markup.add(types.InlineKeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 1', callback_data=f'form1_version_group.{country_state}'))
        else:
            pass
        return markup

    elif state in ['barier_country']:
        lst_country = [k for k, v in list_itemns.items()]
        lst_pagen_country = [lst_country[i:i + element_on_page] for i in range(0, len(lst_country), element_on_page)]
        btns = []

        for country in lst_pagen_country[pagen]:
            btns.append(types.InlineKeyboardButton(text=country, callback_data=country))
        markup = types.InlineKeyboardMarkup()
        markup.add(*btns)

        if pagen + 1 == 1:
            markup.add(types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        elif pagen + 1 == len(lst_pagen_country):
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '))
        else:
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        return markup

    elif state in ['region_reference']:
        list_region = [k for k, v in list_itemns.items()]
        lst_pagen_country = [list_region[i:i + element_on_page] for i in range(0, len(list_region), element_on_page)]
        btns = []

        for country in lst_pagen_country[pagen]:
            btns.append(types.InlineKeyboardButton(text=country, callback_data=country))
        markup = types.InlineKeyboardMarkup()
        markup.add(*btns)

        if pagen + 1 == 1:
            markup.add(types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        elif pagen + 1 == len(lst_pagen_country):
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '))
        else:
            markup.add(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_country)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        return markup

    elif state in ['subscribe']:
        btns = []
        # {'alert_id': 2, 'type_alert': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î', 'status_alert': True}
        lst_pagen_alert = [list_itemns[i:i + element_on_page] for i in range(0, len(list_itemns), element_on_page)]
        for i in lst_pagen_alert[pagen]:
            btns.append(types.InlineKeyboardButton(text=f"{'‚úÖ' if i['status_alert'] else '‚ùå'} {i['type_alert']}", callback_data=i['alert_id']))
        btns = sorted(btns, key=lambda x: len(x.text))
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(*btns)

        if len(lst_pagen_alert) == 1:
            markup.row(types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_alert)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'main'))
        elif pagen + 1 == 1 and len(lst_pagen_alert) > 1:
            markup.row(types.InlineKeyboardButton(text=f'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'main'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_alert)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
        elif pagen + 1 == len(lst_pagen_alert) and len(lst_pagen_alert) > 1:
            markup.row(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_alert)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'main'))
        elif 1 < pagen + 1 < len(lst_pagen_alert) and len(lst_pagen_alert) > 1:
            markup.row(types.InlineKeyboardButton(text=f'‚¨Ö', callback_data=f'back'),
                       types.InlineKeyboardButton(text=f'{pagen + 1}/{len(lst_pagen_alert)}', callback_data=f' '),
                       types.InlineKeyboardButton(text=f'‚û°', callback_data=f'next'))
            markup.row(types.InlineKeyboardButton(text=f'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'main'))

        return markup
